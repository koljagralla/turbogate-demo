// Generated by turbogate (v2.0.2)
// BEFORE EDITING: Please read turbogate docs and the following caveats.
// Purpose of thise file:           The entrypoint for this authorizers lambda handler. Performs parsing and validation and injects the results into the main function.
// Expected signature:              export const handler: async (event: LambdaAuthorizerInputEvent): Promise<LambdaAuthorizerResponse<any, any>>
// Can be edited?                   File could technically be edited, as long as the export signature remains. However, editing this file is not intended usage.
// Can be permanently deleted?      No, CDK synth will fail because this file is dynamically loaded.
// Will be recreated?               Yes, if you delete this file and run `turbogate build` it will be recreated.
import {
  handleFauxExtendZodWithOpenApi,
  LambdaAuthorizerInputEvent,
  LambdaAuthorizerResponse,
  LambdaAuthorizerUtil,
  parseEnvironment,
} from 'turbogate';
import { zEnvironment } from './environment';
import { main } from './main';

export const handler = async (event: LambdaAuthorizerInputEvent): Promise<LambdaAuthorizerResponse<any, any>> => {
  handleFauxExtendZodWithOpenApi; // This need to be in the code so the fauxExtendZodWithOpenApi is not tree shaken.

  const environment = parseEnvironment(zEnvironment);

  const result = await main(environment, event);
  if (result[0] === 'accept') {
    const serializedContext = JSON.stringify(result[1]);
    return LambdaAuthorizerUtil.grantAccessResponse({ serializedContext });
  } else {
    return LambdaAuthorizerUtil.denyAccessResponse();
  }
};
