// Generated by turbogate (v2.0.2)
// BEFORE EDITING: Please read turbogate docs and the following caveats.
// Purpose of thise file:           This is the main function of the lambda authorizer. Use this to implement your custom authorization logic. All provided parameters have been prevalidated.
// Expected signature:              export async function main( environment: Environment, event: LambdaAuthorizerInputEvent, ): Promise<LambdaAuthorizerResponse<Context, any>>
// Can be edited?                   Yes, editing this file is intended. Please ensure to preserve the signature though.
// Can be permanently deleted?      No, generated code will break (so technically yes, if you fix loads of errors but you probably should not).
// Will be recreated?               If you delete this file and run `turbogate build` a boilerplate version of this file will be recreated.
import { LambdaAuthorizerInputEvent } from 'turbogate';
import { Context } from './context';
import { Environment } from './environment';

export async function main(
  environment: Environment,
  event: LambdaAuthorizerInputEvent,
): Promise<['accept', Context] | ['deny']> {
  // // Example minimal implementation:

  // // Extract relevant information from the event
  // const authHeaderValue = event.headers['my-custom-auth-header'];

  // // Check if the auth header is what we expect
  // if (authHeaderValue === 'my-expected-auth-value') {
  //   // Grant access to the endpoint, include the required context
  //   const context = {
  //     myContextValue: 'my-context-value',
  //   };
  //   return ['accept', context];
  // }

  // // Deny access to the endpoint
  // return ['deny'];

  throw new Error('Not implemented');
}
