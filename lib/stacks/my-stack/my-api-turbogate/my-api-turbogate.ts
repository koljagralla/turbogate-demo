// Generated by turbogate (v2.0.2)
// BEFORE EDITING: Please read turbogate docs and the following caveats.
// Purpose of thise file:           This is the main file of your turbogate API. It provides the AbstractTurbogate with all necessary data to create and wire the resources needed for your API during synth.
// Can be edited?                   No, this file is regenrated with each turbogate build execution.
// Will be recreated?               This file will automatically be recreated on every turbogate build.
import { Construct } from 'constructs';
import { AbstractTurbogate, OpenAPIProps, PermissionCallback, handleExtendZodWithOpenApi } from 'turbogate/local';
import { z } from 'zod';
import { apiGwConfig } from './config/api-gw-config';
import { Environment as Environment1 } from './endpoints/items/create-item/environment';
import { Environment as Environment2 } from './authorizer/apiKey/environment';
import { permissions as permissions1 } from './endpoints/items/create-item/permissions';
import { permissions as permissions2 } from './authorizer/apiKey/permissions';

type Resource = '/items';
type OperationName = 'create-item';
type LambdaRequestAuthorizerName = 'apiKey';
type EnvironmentVariableName = keyof (Environment1 & Environment2);
type PermissionName = (typeof permissions1)[number] | (typeof permissions2)[number];
export class MyApiTurbogate extends AbstractTurbogate<
  Resource,
  OperationName,
  LambdaRequestAuthorizerName,
  EnvironmentVariableName,
  PermissionName
> {
  constructor(
    scope: Construct,
    params: {
      /**
       * Use this param to inject the values to bind to the environment variables you declared in your environment.ts files.
       */
      environment: Record<EnvironmentVariableName, string>;
      /**
       * Use this param to inject the callbacks for the permissions you declared in your permissions.ts files.
       */
      permissions: Record<PermissionName, PermissionCallback>;
      /**
       * Use this to override the API name from the spec file.
       * Useful if you want to deploy the same turbogate twice in the same account as the API name is used as a base for all
       * resource IDs and thus needs to be unique accross all instances of this turbogate.
       */
      apiName?: string;

      /**
       * Set this to enable the OpenAPI documentation generation. Pass in an empty object to generate with default values.
       */
      openapi?: OpenAPIProps;
    },
  ) {
    const { apiName, environment, permissions, openapi } = params;

    super(scope, {
      apiName: apiName || 'my-api',
      resources: ['/items'],
      rootDirectory: __dirname,
      operations: [
        {
          name: 'create-item',
          path: '/items',
          method: 'POST',
          lambdaDirectoryPath: '/endpoints/items/create-item',
          authorizer: {
            authorizerType: 'lambdaRequestAuthorizer',
            authorizerName: 'apiKey',
          },
        },
      ],
      lambdaRequestAuthorizers: [
        {
          name: 'apiKey',
          lambdaDirectoryPath: 'authorizer/apiKey',
        },
      ],
      environmentVariables: environment,
      permissions,
      apiGatewayProps: apiGwConfig,
      openapi,
    });
  }
}
